{"/home/travis/build/npmtest/node-npmtest-angular-gettext/test.js":"/* istanbul instrument in package npmtest_angular_gettext */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-gettext/lib.npmtest_angular_gettext.js":"/* istanbul instrument in package npmtest_angular_gettext */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular_gettext = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular_gettext = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-gettext/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular-gettext && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular_gettext */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular_gettext\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular_gettext.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular_gettext.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular_gettext.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular_gettext.__dirname + '/lib.npmtest_angular_gettext.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-gettext/node_modules/angular-gettext/index.js":"require('./dist/angular-gettext.js');\nmodule.exports = 'gettext';\n","/home/travis/build/npmtest/node-npmtest-angular-gettext/node_modules/angular-gettext/dist/angular-gettext.js":"/**\n * @ngdoc module\n * @name gettext\n * @packageName angular-gettext\n * @description Super simple Gettext for Angular.JS\n *\n * A sample application can be found at https://github.com/rubenv/angular-gettext-example.\n * This is an adaptation of the [TodoMVC](http://todomvc.com/) example. You can use this as a guideline while adding {@link angular-gettext angular-gettext} to your own application.\n */\n/**\n * @ngdoc factory\n * @module gettext\n * @name gettextPlurals\n * @param {String} [langCode=en] language code\n * @param {Number} [n=0] number to calculate form for\n * @returns {Number} plural form number\n * @description Provides correct plural form id for the given language\n *\n * Example\n * ```js\n * gettextPlurals('ru', 10); // 1\n * gettextPlurals('en', 1);  // 0\n * gettextPlurals();         // 1\n * ```\n */\nangular.module('gettext', []);\n/**\n * @ngdoc object\n * @module gettext\n * @name gettext\n * @kind function\n * @param {String} str annotation key\n * @description Gettext constant function for annotating strings\n *\n * ```js\n * angular.module('myApp', ['gettext']).config(function(gettext) {\n *   /// MyApp document title\n *   gettext('my-app.title');\n *   ...\n * })\n * ```\n */\nangular.module('gettext').constant('gettext', function (str) {\n    /*\n     * Does nothing, simply returns the input string.\n     *\n     * This function serves as a marker for `grunt-angular-gettext` to know that\n     * this string should be extracted for translations.\n     */\n    return str;\n});\n\n/**\n * @ngdoc service\n * @module gettext\n * @name gettextCatalog\n * @requires gettextPlurals\n * @requires gettextFallbackLanguage\n * @requires https://docs.angularjs.org/api/ng/service/$http $http\n * @requires https://docs.angularjs.org/api/ng/service/$cacheFactory $cacheFactory\n * @requires https://docs.angularjs.org/api/ng/service/$interpolate $interpolate\n * @requires https://docs.angularjs.org/api/ng/service/$rootScope $rootScope\n * @description Provides set of method to translate stings\n */\nangular.module('gettext').factory('gettextCatalog', [\"gettextPlurals\", \"gettextFallbackLanguage\", \"$http\", \"$cacheFactory\", \"$interpolate\", \"$rootScope\", function (gettextPlurals, gettextFallbackLanguage, $http, $cacheFactory, $interpolate, $rootScope) {\n    var catalog;\n    var noContext = '$$noContext';\n\n    // IE8 returns UPPER CASE tags, even though the source is lower case.\n    // This can causes the (key) string in the DOM to have a different case to\n    // the string in the `po` files.\n    // IE9, IE10 and IE11 reorders the attributes of tags.\n    var test = '<span id=\"test\" title=\"test\" class=\"tested\">test</span>';\n    var isHTMLModified = (angular.element('<span>' + test + '</span>').html() !== test);\n\n    var prefixDebug = function (string) {\n        if (catalog.debug && catalog.currentLanguage !== catalog.baseLanguage) {\n            return catalog.debugPrefix + string;\n        } else {\n            return string;\n        }\n    };\n\n    var addTranslatedMarkers = function (string) {\n        if (catalog.showTranslatedMarkers) {\n            return catalog.translatedMarkerPrefix + string + catalog.translatedMarkerSuffix;\n        } else {\n            return string;\n        }\n    };\n\n    function broadcastUpdated() {\n        /**\n         * @ngdoc event\n         * @name gettextCatalog#gettextLanguageChanged\n         * @eventType broadcast on $rootScope\n         * @description Fires language change notification without any additional parameters.\n         */\n        $rootScope.$broadcast('gettextLanguageChanged');\n    }\n\n    catalog = {\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#debug\n         * @public\n         * @type {Boolean} false\n         * @see gettextCatalog#debug\n         * @description Whether or not to prefix untranslated strings with `[MISSING]:` or a custom prefix.\n         */\n        debug: false,\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#debugPrefix\n         * @public\n         * @type {String} [MISSING]:\n         * @description Custom prefix for untranslated strings when {@link gettextCatalog#debug gettextCatalog#debug} set to `true`.\n         */\n        debugPrefix: '[MISSING]: ',\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#showTranslatedMarkers\n         * @public\n         * @type {Boolean} false\n         * @description Whether or not to wrap all processed text with markers.\n         *\n         * Example output: `[Welcome]`\n         */\n        showTranslatedMarkers: false,\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#translatedMarkerPrefix\n         * @public\n         * @type {String} [\n         * @description Custom prefix to mark strings that have been run through {@link angular-gettext angular-gettext}.\n         */\n        translatedMarkerPrefix: '[',\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#translatedMarkerSuffix\n         * @public\n         * @type {String} ]\n         * @description Custom suffix to mark strings that have been run through {@link angular-gettext angular-gettext}.\n         */\n        translatedMarkerSuffix: ']',\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#strings\n         * @private\n         * @type {Object}\n         * @description An object of loaded translation strings. Shouldn't be used directly.\n         */\n        strings: {},\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#baseLanguage\n         * @protected\n         * @deprecated\n         * @since 2.0\n         * @type {String} en\n         * @description The default language, in which you're application is written.\n         *\n         * This defaults to English and it's generally a bad idea to use anything else:\n         * if your language has different pluralization rules you'll end up with incorrect translations.\n         */\n        baseLanguage: 'en',\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#currentLanguage\n         * @public\n         * @type {String}\n         * @description Active language.\n         */\n        currentLanguage: 'en',\n        /**\n         * @ngdoc property\n         * @name gettextCatalog#cache\n         * @public\n         * @type {String} en\n         * @description Language cache for lazy load\n         */\n        cache: $cacheFactory('strings'),\n\n        /**\n         * @ngdoc method\n         * @name gettextCatalog#setCurrentLanguage\n         * @public\n         * @param {String} lang language name\n         * @description Sets the current language and makes sure that all translations get updated correctly.\n         */\n        setCurrentLanguage: function (lang) {\n            this.currentLanguage = lang;\n            broadcastUpdated();\n        },\n\n        /**\n         * @ngdoc method\n         * @name gettextCatalog#getCurrentLanguage\n         * @public\n         * @returns {String} current language\n         * @description Returns the current language.\n         */\n        getCurrentLanguage: function () {\n            return this.currentLanguage;\n        },\n\n        /**\n         * @ngdoc method\n         * @name gettextCatalog#setStrings\n         * @public\n         * @param {String} language language name\n         * @param {Object.<String>} strings set of strings where the key is the translation `key` and `value` is the translated text\n         * @description Processes an object of string definitions. {@link guide:manual-setstrings More details here}.\n         */\n        setStrings: function (language, strings) {\n            if (!this.strings[language]) {\n                this.strings[language] = {};\n            }\n\n            var defaultPlural = gettextPlurals(language, 1);\n            for (var key in strings) {\n                var val = strings[key];\n\n                if (isHTMLModified) {\n                    // Use the DOM engine to render any HTML in the key (#131).\n                    key = angular.element('<span>' + key + '</span>').html();\n                }\n\n                if (angular.isString(val) || angular.isArray(val)) {\n                    // No context, wrap it in $$noContext.\n                    var obj = {};\n                    obj[noContext] = val;\n                    val = obj;\n                }\n\n                if (!this.strings[language][key]) {\n                    this.strings[language][key] = {};\n                }\n\n                for (var context in val) {\n                    var str = val[context];\n                    if (!angular.isArray(str)) {\n                        // Expand single strings\n                        this.strings[language][key][context] = [];\n                        this.strings[language][key][context][defaultPlural] = str;\n                    } else {\n                        this.strings[language][key][context] = str;\n                    }\n                }\n            }\n\n            broadcastUpdated();\n        },\n\n        /**\n         * @ngdoc method\n         * @name gettextCatalog#getStringFormFor\n         * @protected\n         * @param {String} language language name\n         * @param {String} string translation key\n         * @param {Number=} n number to build sting form for\n         * @param {String=} context translation key context, e.g. {@link doc:context Verb, Noun}\n         * @returns {String|Null} translated or annotated string or null if language is not set\n         * @description Translate a string with the given language, count and context.\n         */\n        getStringFormFor: function (language, string, n, context) {\n            if (!language) {\n                return null;\n            }\n            var stringTable = this.strings[language] || {};\n            var contexts = stringTable[string] || {};\n            var plurals = contexts[context || noContext] || [];\n            return plurals[gettextPlurals(language, n)];\n        },\n\n        /**\n         * @ngdoc method\n         * @name gettextCatalog#getString\n         * @public\n         * @param {String} string translation key\n         * @param {$rootScope.Scope=} scope scope to do interpolation against\n         * @param {String=} context translation key context, e.g. {@link doc:context Verb, Noun}\n         * @returns {String} translated or annotated string\n         * @description Translate a string with the given scope and context.\n         *\n         * First it tries {@link gettextCatalog#currentLanguage gettextCatalog#currentLanguage} (e.g. `en-US`) then {@link gettextFallbackLanguage fallback} (e.g. `en`).\n         *\n         * When `scope` is supplied it uses Angular.JS interpolation, so something like this will do what you expect:\n         * ```js\n         * var hello = gettextCatalog.getString(\"Hello {{name}}!\", { name: \"Ruben\" });\n         * // var hello will be \"Hallo Ruben!\" in Dutch.\n         * ```\n         * Avoid using scopes - this skips interpolation and is a lot faster.\n         */\n        getString: function (string, scope, context) {\n            var fallbackLanguage = gettextFallbackLanguage(this.currentLanguage);\n            string = this.getStringFormFor(this.currentLanguage, string, 1, context) ||\n                     this.getStringFormFor(fallbackLanguage, string, 1, context) ||\n                     prefixDebug(string);\n            string = scope ? $interpolate(string)(scope) : string;\n            return addTranslatedMarkers(string);\n        },\n\n        /**\n         * @ngdoc method\n         * @name gettextCatalog#getPlural\n         * @public\n         * @param {Number} n number to build sting form for\n         * @param {String} string translation key\n         * @param {String} stringPlural plural translation key\n         * @param {$rootScope.Scope=} scope scope to do interpolation against\n         * @param {String=} context translation key context, e.g. {@link doc:context Verb, Noun}\n         * @returns {String} translated or annotated string\n         * @see {@link gettextCatalog#getString gettextCatalog#getString} for details\n         * @description Translate a plural string with the given context.\n         */\n        getPlural: function (n, string, stringPlural, scope, context) {\n            var fallbackLanguage = gettextFallbackLanguage(this.currentLanguage);\n            string = this.getStringFormFor(this.currentLanguage, string, n, context) ||\n                     this.getStringFormFor(fallbackLanguage, string, n, context) ||\n                     prefixDebug(n === 1 ? string : stringPlural);\n            if (scope) {\n                scope.$count = n;\n                string = $interpolate(string)(scope);\n            }\n            return addTranslatedMarkers(string);\n        },\n\n        /**\n         * @ngdoc method\n         * @name gettextCatalog#loadRemote\n         * @public\n         * @param {String} url location of the translations\n         * @description Load a set of translation strings from a given URL.\n         *\n         * This should be a JSON catalog generated with [angular-gettext-tools](https://github.com/rubenv/angular-gettext-tools).\n         * {@link guide:lazy-loading More details here}.\n         */\n        loadRemote: function (url) {\n            return $http({\n                method: 'GET',\n                url: url,\n                cache: catalog.cache\n            }).then(function (response) {\n                var data = response.data;\n                for (var lang in data) {\n                    catalog.setStrings(lang, data[lang]);\n                }\n                return response;\n            });\n        }\n    };\n\n    return catalog;\n}]);\n\n/**\n * @ngdoc directive\n * @module gettext\n * @name translate\n * @requires gettextCatalog\n * @requires gettextUtil\n * @requires https://docs.angularjs.org/api/ng/service/$parse $parse\n * @requires https://docs.angularjs.org/api/ng/service/$animate $animate\n * @requires https://docs.angularjs.org/api/ng/service/$compile $compile\n * @requires https://docs.angularjs.org/api/ng/service/$window $window\n * @restrict AE\n * @param {String} [translatePlural] plural form\n * @param {Number} translateN value to watch to substitute correct plural form\n * @param {String} translateContext context value, e.g. {@link doc:context Verb, Noun}\n * @description Annotates and translates text inside directive\n *\n * Full interpolation support is available in translated strings, so the following will work as expected:\n * ```js\n * <div translate>Hello {{name}}!</div>\n * ```\n *\n * You can also use custom context parameters while interpolating. This approach allows usage\n * of angular filters as well as custom logic inside your translated messages without unnecessary impact on translations.\n *\n * So for example when you have message like this:\n * ```js\n * <div translate>Last modified {{modificationDate | date:'yyyy-MM-dd HH:mm:ss Z'}} by {{author}}.</div>\n * ```\n * you will have it extracted in exact same version so it would look like this:\n * `Last modified {{modificationDate | date:'yyyy-MM-dd HH:mm:ss Z'}} by {{author}}`.\n * To start with it might be too complicated to read and handle by non technical translator. It's easy to make mistake\n * when copying format for example. Secondly if you decide to change format by some point of the project translation will broke\n * as it won't be the same string anymore.\n *\n * Instead your translator should only be concerned to place {{modificationDate}} correctly and you should have a free hand\n * to modify implementation details on how to present the results. This is how you can achieve the goal:\n * ```js\n * <div translate translate-params-modification-date=\"modificationDate | date:'yyyy-MM-dd HH:mm:ss Z'\">Last modified {{modificationDate}} by {{author}}.</div>\n * ```\n *\n * There's a few more things worth to point out:\n * 1. You can use as many parameters as you want. Each parameter begins with `translate-params-` followed by snake-case parameter name.\n * Each parameter will be available for interpolation in camelCase manner (just like angular directive works by default).\n * ```js\n * <div translate translate-params-my-custom-param=\"param1\" translate-params-name=\"name\">Param {{myCustomParam}} has been changed by {{name}}.</div>\n * ```\n * 2. You can rename your variables from current scope to simple ones if you like.\n * ```js\n * <div translate translate-params-date=\"veryUnintuitiveNameForDate\">Today's date is: {{date}}.</div>\n * ```\n * 3. You can use translate-params only for some interpolations. Rest would be treated as usual.\n * ```js\n * <div translate translate-params-cost=\"cost | currency\">This product: {{product}} costs {{cost}}.</div>\n * ```\n */\nangular.module('gettext').directive('translate', [\"gettextCatalog\", \"$parse\", \"$animate\", \"$compile\", \"$window\", \"gettextUtil\", function (gettextCatalog, $parse, $animate, $compile, $window, gettextUtil) {\n    var msie = parseInt((/msie (\\d+)/.exec(angular.lowercase($window.navigator.userAgent)) || [])[1], 10);\n    var PARAMS_PREFIX = 'translateParams';\n\n    function getCtxAttr(key) {\n        return gettextUtil.lcFirst(key.replace(PARAMS_PREFIX, ''));\n    }\n\n    function handleInterpolationContext(scope, attrs, update) {\n        var attributes = Object.keys(attrs).filter(function (key) {\n            return gettextUtil.startsWith(key, PARAMS_PREFIX) && key !== PARAMS_PREFIX;\n        });\n\n        if (!attributes.length) {\n            return null;\n        }\n\n        var interpolationContext = angular.extend({}, scope);\n        var unwatchers = [];\n        attributes.forEach(function (attribute) {\n            var unwatch = scope.$watch(attrs[attribute], function (newVal) {\n                var key = getCtxAttr(attribute);\n                interpolationContext[key] = newVal;\n                update(interpolationContext);\n            });\n            unwatchers.push(unwatch);\n        });\n        scope.$on('$destroy', function () {\n            unwatchers.forEach(function (unwatch) {\n                unwatch();\n            });\n        });\n        return interpolationContext;\n    }\n\n    return {\n        restrict: 'AE',\n        terminal: true,\n        compile: function compile(element, attrs) {\n            // Validate attributes\n            gettextUtil.assert(!attrs.translatePlural || attrs.translateN, 'translate-n', 'translate-plural');\n            gettextUtil.assert(!attrs.translateN || attrs.translatePlural, 'translate-plural', 'translate-n');\n\n            var msgid = gettextUtil.trim(element.html());\n            var translatePlural = attrs.translatePlural;\n            var translateContext = attrs.translateContext;\n\n            if (msie <= 8) {\n                // Workaround fix relating to angular adding a comment node to\n                // anchors. angular/angular.js/#1949 / angular/angular.js/#2013\n                if (msgid.slice(-13) === '<!--IE fix-->') {\n                    msgid = msgid.slice(0, -13);\n                }\n            }\n\n            return {\n                post: function (scope, element, attrs) {\n                    var countFn = $parse(attrs.translateN);\n                    var pluralScope = null;\n                    var linking = true;\n\n                    function update(interpolationContext) {\n                        interpolationContext = interpolationContext || null;\n\n                        // Fetch correct translated string.\n                        var translated;\n                        if (translatePlural) {\n                            scope = pluralScope || (pluralScope = scope.$new());\n                            scope.$count = countFn(scope);\n                            translated = gettextCatalog.getPlural(scope.$count, msgid, translatePlural, interpolationContext, translateContext);\n                        } else {\n                            translated = gettextCatalog.getString(msgid, interpolationContext, translateContext);\n                        }\n                        var oldContents = element.contents();\n\n                        if (oldContents.length === 0){\n                            return;\n                        }\n\n                        // Avoid redundant swaps\n                        if (translated === gettextUtil.trim(oldContents.html())){\n                            // Take care of unlinked content\n                            if (linking){\n                                $compile(oldContents)(scope);\n                            }\n                            return;\n                        }\n\n                        // Swap in the translation\n                        var newWrapper = angular.element('<span>' + translated + '</span>');\n                        $compile(newWrapper.contents())(scope);\n                        var newContents = newWrapper.contents();\n\n                        $animate.enter(newContents, element);\n                        $animate.leave(oldContents);\n                    }\n\n                    var interpolationContext = handleInterpolationContext(scope, attrs, update);\n                    update(interpolationContext);\n                    linking = false;\n\n                    if (attrs.translateN) {\n                        scope.$watch(attrs.translateN, function () {\n                            update(interpolationContext);\n                        });\n                    }\n\n                    /**\n                     * @ngdoc event\n                     * @name translate#gettextLanguageChanged\n                     * @eventType listen on scope\n                     * @description Listens for language updates and changes translation accordingly\n                     */\n                    scope.$on('gettextLanguageChanged', function () {\n                        update(interpolationContext);\n                    });\n\n                }\n            };\n        }\n    };\n}]);\n\n/**\n * @ngdoc factory\n * @module gettext\n * @name gettextFallbackLanguage\n * @param {String} langCode language code\n * @returns {String|Null} fallback language\n * @description Strips regional code and returns language code only\n *\n * Example\n * ```js\n * gettextFallbackLanguage('ru');     // \"null\"\n * gettextFallbackLanguage('en_GB');  // \"en\"\n * gettextFallbackLanguage();         // null\n * ```\n */\nangular.module(\"gettext\").factory(\"gettextFallbackLanguage\", function () {\n    var cache = {};\n    var pattern = /([^_]+)_[^_]+$/;\n\n    return function (langCode) {\n        if (cache[langCode]) {\n            return cache[langCode];\n        }\n\n        var matches = pattern.exec(langCode);\n        if (matches) {\n            cache[langCode] = matches[1];\n            return matches[1];\n        }\n\n        return null;\n    };\n});\n/**\n * @ngdoc filter\n * @module gettext\n * @name translate\n * @requires gettextCatalog\n * @param {String} input translation key\n * @param {String} context context to evaluate key against\n * @returns {String} translated string or annotated key\n * @see {@link doc:context Verb, Noun}\n * @description Takes key and returns string\n *\n * Sometimes it's not an option to use an attribute (e.g. when you want to annotate an attribute value).\n * There's a `translate` filter available for this purpose.\n *\n * ```html\n * <input type=\"text\" placeholder=\"{{'Username'|translate}}\" />\n * ```\n * This filter does not support plural strings.\n *\n * You may want to use {@link guide:custom-annotations custom annotations} to avoid using the `translate` filter all the time. * Is\n */\nangular.module('gettext').filter('translate', [\"gettextCatalog\", function (gettextCatalog) {\n    function filter(input, context) {\n        return gettextCatalog.getString(input, null, context);\n    }\n    filter.$stateful = true;\n    return filter;\n}]);\n\n// Do not edit this file, it is autogenerated using genplurals.py!\nangular.module(\"gettext\").factory(\"gettextPlurals\", function () {\n    var languageCodes = {\n        \"pt_BR\": \"pt_BR\",\n        \"pt-BR\": \"pt_BR\"\n    };\n    return function (langCode, n) {\n        switch (getLanguageCode(langCode)) {\n            case \"ay\":  // Aymará\n            case \"bo\":  // Tibetan\n            case \"cgg\": // Chiga\n            case \"dz\":  // Dzongkha\n            case \"fa\":  // Persian\n            case \"id\":  // Indonesian\n            case \"ja\":  // Japanese\n            case \"jbo\": // Lojban\n            case \"ka\":  // Georgian\n            case \"kk\":  // Kazakh\n            case \"km\":  // Khmer\n            case \"ko\":  // Korean\n            case \"ky\":  // Kyrgyz\n            case \"lo\":  // Lao\n            case \"ms\":  // Malay\n            case \"my\":  // Burmese\n            case \"sah\": // Yakut\n            case \"su\":  // Sundanese\n            case \"th\":  // Thai\n            case \"tt\":  // Tatar\n            case \"ug\":  // Uyghur\n            case \"vi\":  // Vietnamese\n            case \"wo\":  // Wolof\n            case \"zh\":  // Chinese\n                // 1 form\n                return 0;\n            case \"is\":  // Icelandic\n                // 2 forms\n                return (n%10!=1 || n%100==11) ? 1 : 0;\n            case \"jv\":  // Javanese\n                // 2 forms\n                return n!=0 ? 1 : 0;\n            case \"mk\":  // Macedonian\n                // 2 forms\n                return n==1 || n%10==1 ? 0 : 1;\n            case \"ach\": // Acholi\n            case \"ak\":  // Akan\n            case \"am\":  // Amharic\n            case \"arn\": // Mapudungun\n            case \"br\":  // Breton\n            case \"fil\": // Filipino\n            case \"fr\":  // French\n            case \"gun\": // Gun\n            case \"ln\":  // Lingala\n            case \"mfe\": // Mauritian Creole\n            case \"mg\":  // Malagasy\n            case \"mi\":  // Maori\n            case \"oc\":  // Occitan\n            case \"pt_BR\":  // Brazilian Portuguese\n            case \"tg\":  // Tajik\n            case \"ti\":  // Tigrinya\n            case \"tr\":  // Turkish\n            case \"uz\":  // Uzbek\n            case \"wa\":  // Walloon\n            case \"zh\":  // Chinese\n                // 2 forms\n                return n>1 ? 1 : 0;\n            case \"lv\":  // Latvian\n                // 3 forms\n                return (n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2);\n            case \"lt\":  // Lithuanian\n                // 3 forms\n                return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2);\n            case \"be\":  // Belarusian\n            case \"bs\":  // Bosnian\n            case \"hr\":  // Croatian\n            case \"ru\":  // Russian\n            case \"sr\":  // Serbian\n            case \"uk\":  // Ukrainian\n                // 3 forms\n                return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n            case \"mnk\": // Mandinka\n                // 3 forms\n                return (n==0 ? 0 : n==1 ? 1 : 2);\n            case \"ro\":  // Romanian\n                // 3 forms\n                return (n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2);\n            case \"pl\":  // Polish\n                // 3 forms\n                return (n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n            case \"cs\":  // Czech\n            case \"sk\":  // Slovak\n                // 3 forms\n                return (n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n            case \"sl\":  // Slovenian\n                // 4 forms\n                return (n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0);\n            case \"mt\":  // Maltese\n                // 4 forms\n                return (n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3);\n            case \"gd\":  // Scottish Gaelic\n                // 4 forms\n                return (n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3;\n            case \"cy\":  // Welsh\n                // 4 forms\n                return (n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3;\n            case \"kw\":  // Cornish\n                // 4 forms\n                return (n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3;\n            case \"ga\":  // Irish\n                // 5 forms\n                return n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4;\n            case \"ar\":  // Arabic\n                // 6 forms\n                return (n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5);\n            default: // Everything else\n                return n != 1 ? 1 : 0;\n        }\n    };\n\n    /**\n     * Method extracts iso639-2 language code from code with locale e.g. pl_PL, en_US, etc.\n     * If it's provided with standalone iso639-2 language code it simply returns it.\n     * @param {String} langCode\n     * @returns {String} iso639-2 language Code\n     */\n    function getLanguageCode(langCode) {\n        if (!languageCodes[langCode]) {\n            languageCodes[langCode] = langCode.split(/\\-|_/).shift();\n        }\n        return languageCodes[langCode];\n    }\n});\n\n/**\n * @ngdoc factory\n * @module gettext\n * @name gettextUtil\n * @description Utility service for common operations and polyfills.\n */\nangular.module('gettext').factory('gettextUtil', function gettextUtil() {\n    /**\n     * @ngdoc method\n     * @name gettextUtil#trim\n     * @public\n     * @param {string} value String to be trimmed.\n     * @description Trim polyfill for old browsers (instead of jQuery). Based on AngularJS-v1.2.2 (angular.js#620).\n     *\n     * Example\n     * ```js\n     * gettextUtil.assert('  no blanks  '); // \"no blanks\"\n     * ```\n     */\n    var trim = (function () {\n        if (!String.prototype.trim) {\n            return function (value) {\n                return (typeof value === 'string') ? value.replace(/^\\s*/, '').replace(/\\s*$/, '') : value;\n            };\n        }\n        return function (value) {\n            return (typeof value === 'string') ? value.trim() : value;\n        };\n    })();\n\n    /**\n     * @ngdoc method\n     * @name gettextUtil#assert\n     * @public\n     * @param {bool} condition condition to check\n     * @param {String} missing name of the directive missing attribute\n     * @param {String} found name of attribute that has been used with directive\n     * @description Throws error if condition is not met, which means that directive was used with certain parameter\n     * that requires another one (which is missing).\n     *\n     * Example\n     * ```js\n     * gettextUtil.assert(!attrs.translatePlural || attrs.translateN, 'translate-n', 'translate-plural');\n     * //You should add a translate-n attribute whenever you add a translate-plural attribute.\n     * ```\n     */\n    function assert(condition, missing, found) {\n        if (!condition) {\n            throw new Error('You should add a ' + missing + ' attribute whenever you add a ' + found + ' attribute.');\n        }\n    }\n\n    /**\n     * @ngdoc method\n     * @name gettextUtil#startsWith\n     * @public\n     * @param {string} target String on which checking will occur.\n     * @param {string} query String expected to be at the beginning of target.\n     * @returns {boolean} Returns true if object has no ownProperties. For arrays returns true if length == 0.\n     * @description Checks if string starts with another string.\n     *\n     * Example\n     * ```js\n     * gettextUtil.startsWith('Home sweet home.', 'Home'); //true\n     * gettextUtil.startsWith('Home sweet home.', 'sweet'); //false\n     * ```\n     */\n    function startsWith(target, query) {\n        return target.indexOf(query) === 0;\n    }\n\n    /**\n     * @ngdoc method\n     * @name gettextUtil#lcFirst\n     * @public\n     * @param {string} target String to transform.\n     * @returns {string} Strings beginning with lowercase letter.\n     * @description Makes first letter of the string lower case\n     *\n     * Example\n     * ```js\n     * gettextUtil.lcFirst('Home Sweet Home.'); //'home Sweet Home'\n     * gettextUtil.lcFirst('ShouldBeCamelCase.'); //'shouldBeCamelCase'\n     * ```\n     */\n    function lcFirst(target) {\n        var first = target.charAt(0).toLowerCase();\n        return first + target.substr(1);\n    }\n\n    return {\n        trim: trim,\n        assert: assert,\n        startsWith: startsWith,\n        lcFirst: lcFirst\n    };\n});\n"}